// Code generated by go-bindata.
// sources:
// templates/commandline.tmpl
// templates/home.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCommandlineTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x6d\x6f\xdb\x36\x10\xfe\xbc\xfc\x8a\xab\x5a\xa0\x2d\x6a\x9a\xe9\x9a\x0e\x9b\x2b\x79\xc0\x92\x6e\xc8\x96\x36\x43\x93\xb6\x18\xb0\x0f\x3d\x91\x67\xeb\x6a\x8a\xd4\x48\xca\x8e\x9b\xe5\xbf\x0f\x94\xe2\xf8\x25\x69\x36\x60\xfe\x10\x85\x77\xf7\xdc\x73\xaf\x94\xf2\x07\x47\xa7\x87\xe7\x7f\xfc\xfe\x1a\xaa\x58\x9b\xf1\x5e\x9e\x1e\x60\xd0\x4e\x8b\x8c\x6c\x96\x04\x84\x7a\xbc\x07\x90\xd7\x14\x11\xaa\x18\x1b\x41\x7f\xb5\x3c\x2f\xb2\x43\x67\x23\xd9\x28\xce\x97\x0d\x65\xa0\xfa\x53\x91\x45\xba\x88\x32\xb9\x79\x05\xaa\x42\x1f\x28\x16\xef\xcf\x7f\x16\xdf\x67\x72\xed\xc6\x62\x4d\x45\x36\x67\x5a\x34\xce\xc7\x0d\xf0\x82\x75\xac\x0a\x4d\x73\x56\x24\xba\xc3\x00\xd8\x72\x64\x34\x22\x28\x34\x54\x3c\x1f\x40\x8d\x17\x5c\xb7\xf5\x4a\x30\xdc\xbf\x76\x1d\x39\x1a\x1a\xff\x82\x76\xba\xc0\x65\x2e\xfb\xe3\x5e\xd2\x3c\x10\x02\x0e\xcf\xce\x00\x84\xe8\x2c\x0d\xdb\x19\x54\x9e\x26\x45\x96\x32\x0a\x23\x29\x27\xce\xc6\x30\x9c\x3a\x37\x35\x84\x0d\x87\xa1\x72\xb5\x64\xe5\xec\x8f\x13\xac\xd9\x2c\x8b\x37\x18\xc9\x33\x9a\x67\xc7\xca\xd9\x90\x81\x27\x53\x64\x21\x2e\x0d\x85\x8a\x28\x66\x6b\xc7\xbb\x9a\x1d\x26\xa5\xed\xe7\x30\x54\xc6\xb5\x7a\x62\xd0\x53\xc7\x84\x9f\xf1\x42\x1a\x2e\x83\xac\xaf\x79\xf8\x0b\xc9\xfd\xe1\xf3\xfd\xfd\xe1\xb7\x52\x85\x2d\xf9\xb0\x66\x3b\x54\x21\x74\x9c\x00\x79\xc7\xd5\xff\x9f\x7e\x8d\xa7\x61\x89\xa1\x82\xcb\x1b\x51\xfa\x95\xa8\x66\x53\xef\x5a\xab\x85\x72\xc6\xf9\x11\x94\x06\xd5\xec\xd5\x96\xd1\xb5\xe6\xe1\xc1\x0f\x93\xf2\xc5\xcb\x6d\x5d\x2a\x91\x08\xfc\x85\x46\x10\x6a\x34\xe6\x0e\x6d\x5f\xab\x11\x1c\x3a\x1b\x9c\xc1\x30\x78\xe3\x2c\x2a\x37\x38\x69\x15\x6b\xbc\x16\xd3\xe0\x84\x4b\xf2\x18\xd9\x59\x78\xe3\xac\x1b\x1c\xd1\x67\xfc\xd0\xc2\x19\xda\xd0\x0b\x7e\xe2\x18\xa2\x27\xac\xe1\x03\x79\xdc\x50\x1c\xba\xd6\x33\x79\x78\x4b\x8b\x01\xd4\xce\xba\xd0\xa0\xa2\xed\x48\xdc\x9c\xfc\xc4\xb8\xc5\x08\xb0\x8d\x6e\x5b\xb7\x70\x5e\x8b\x85\xc7\x66\x04\xd6\xf9\x1a\x77\x92\x58\x54\x1c\x49\x74\x3e\x47\xa9\x8e\x9d\xe9\xda\xe4\xaa\xaf\xb7\xbc\x2e\x78\x2e\x57\xdb\x01\x90\x97\x4e\x2f\xd7\x3d\xc8\x2d\xce\x41\x19\x0c\xa1\xc8\x0c\x4f\xab\x28\x4a\xd3\x12\xa4\x3f\x19\x78\x67\xa8\xc8\x2c\xce\x79\xda\x15\x21\x1b\x6f\x05\x91\x6b\xbe\xc1\x5a\x9c\x77\x31\x34\xe4\xbb\x2d\x41\xb6\xe4\xb3\x71\x8e\xc0\xba\xc8\x8c\x9b\x3a\xb1\x16\x5f\x0f\xda\xc3\x6c\x85\x2e\x3d\x5a\x2d\x92\x55\x36\x9e\xae\xf6\x02\x77\xd8\x5a\xb3\x32\xf7\x29\x50\xa8\x58\x93\x70\x56\xd4\xa4\x45\x82\x6b\xb7\xd8\x8d\xb0\xc3\x19\x4e\x61\xf4\x94\x32\x71\xb4\x31\x1b\x9f\x74\xcf\x44\x92\x4b\xc3\x3b\x4c\xb2\x35\xdd\x3e\x6e\x93\xa7\x44\x52\x9a\xb5\x2b\xd9\xd0\x4d\xec\x21\x85\x61\x71\xfe\x6f\xd4\x0f\xb3\xf1\x11\x29\xa7\x09\x7e\xfd\x78\x7e\x1f\xf1\x96\x64\x8d\x06\x8d\x11\x05\xaa\xc8\x73\x8c\x14\xee\x8c\xa5\x6c\x63\x74\x36\xad\x8d\xc1\x26\x50\x36\xce\x79\xa5\x5a\xad\xa5\xe0\xee\x5a\x18\xd7\x64\xdb\x5c\xf2\xf8\x76\x9d\xa5\xe6\xf9\xc6\x80\x48\x8b\x1b\xc7\xbd\xbb\x9a\xbf\xd1\xf0\x6d\x57\xd5\xc1\xca\x24\x0d\x60\x1a\x0d\xb2\x91\x3c\x68\xf4\x33\xb2\xe2\xc5\x1d\x35\xfb\x48\x46\xb9\x9a\xe0\xf2\x12\x86\xef\x03\xf9\x74\x05\xc3\xd5\xd5\x70\x27\xc6\xea\x60\x97\xea\xe5\x6d\x5f\xc7\x16\x9c\x4f\xb4\xd1\xc1\x94\x22\x28\x57\xd7\xdd\xa0\xb1\x25\x40\xa5\x28\x84\xa4\x8a\x55\x4f\x77\x68\xda\x10\xc9\xbf\xed\x19\xe1\xb7\xb6\x24\x6f\x29\x52\x00\xd5\x6b\x06\xb0\x74\x2d\x2c\xd8\x18\xb0\x44\x3a\x61\x95\xb3\x13\x9e\xb6\x9e\xe0\xb4\x21\x7b\x7c\x94\xae\x0e\x4b\x2a\xc2\x93\xd3\xe3\xa3\xc3\xa7\x69\xb3\x2b\xb2\xac\xfa\x4b\x64\xe2\x7c\x72\xe1\x41\x19\x26\x1b\x6f\x25\xf5\x72\xbc\x9b\xc2\xb6\x45\xe9\x77\xb2\x6e\x6e\x27\x7d\x5e\xd1\x56\xe8\x9b\x39\xb7\x91\x0d\xc7\xe5\x00\x66\x6d\x49\x2a\x9a\xf4\x8e\x5a\x42\x49\xc0\x36\x44\x34\x86\x34\x18\x9e\x11\x04\x37\xda\x09\xed\x86\x68\x6f\xef\x9b\x9d\xb0\xf2\xc6\xd3\xcd\x00\x62\xa8\xb2\xf1\xde\x23\x50\xad\x37\x20\x4e\x4e\x61\xf5\x36\x09\xd1\x79\x9c\xd2\xee\x9b\x6b\x76\x13\xa9\xf0\x64\x08\x03\xc9\xd5\xf3\x53\xef\x23\xfc\x0f\x17\x21\x62\x69\x68\x18\x2f\xe2\x27\x59\xb2\x95\x8f\x9e\xb4\xdd\x3c\xfd\x0d\xb8\x98\xc1\xe3\xcb\xc6\xb3\x8d\x10\x9d\x71\x0b\xf2\x4f\x1e\xed\x3f\xbd\x7a\xfc\x54\x62\xad\xbf\x3b\x90\xd7\x15\x4a\xa9\x54\xb5\xd3\xf0\xec\x02\x86\x1b\xc2\xd0\x6a\x07\xf5\x7c\x2d\x03\xd9\x06\x2f\x8d\x53\x68\x3a\xaa\x95\xe9\x76\x15\x3d\xed\x2e\xdb\x1d\x1d\x3c\xb5\x8a\x56\x1d\x02\x0e\xeb\xe6\xf4\xf3\x97\x5a\x46\x17\xa4\xda\x48\xdd\xe8\x4e\x9c\x31\x6e\xc1\x76\x3a\xca\x65\x79\xbf\xfb\x3b\x5b\xb5\x62\xea\x47\x19\x02\x45\xa1\x3c\x69\xb2\xe9\x6b\x26\x74\x9b\xf1\xba\x46\x36\x69\x27\xe0\xcf\xce\x9d\x10\x69\xae\x45\xe3\xdd\x9c\x35\xf9\xc2\xb1\x56\x5f\xd1\x09\xf4\xd3\x82\x75\x23\x38\x84\x96\xbc\x68\xbd\x29\x92\xcb\xe3\xee\xf8\xfe\xdd\xc9\xd7\xdd\x76\xd0\x7e\x53\x04\xeb\xa2\x5f\xd1\x74\x3a\x3e\xfa\x6f\xa0\x40\xca\x53\xdc\x00\x9e\x75\x82\x04\xfe\x3a\xd6\xd3\xc4\x53\xa8\x44\x74\x33\xb2\x1d\xf6\x5d\x2f\x39\x4f\x82\xfb\xb1\xac\x37\x60\xc7\x47\x2b\xc4\x3d\x43\xb0\x71\xdb\xe6\xb2\x7f\x35\xe7\xb2\xff\xc6\xfd\x27\x00\x00\xff\xff\xac\x59\xd6\x93\xf4\x0a\x00\x00")

func templatesCommandlineTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCommandlineTmpl,
		"templates/commandline.tmpl",
	)
}

func templatesCommandlineTmpl() (*asset, error) {
	bytes, err := templatesCommandlineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/commandline.tmpl", size: 2804, mode: os.FileMode(420), modTime: time.Unix(1525948100, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHomeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x51\x6f\xe3\x36\x0c\x7e\xef\xaf\xe0\xe9\x5e\x36\x2c\xb2\x9b\xbb\x15\xd8\x72\x76\x86\xad\xdd\x80\x62\x77\xeb\x80\x76\x07\xec\x91\x96\x19\x9b\xad\x2c\xf9\x24\x39\x6e\x6e\xd8\x7f\x1f\x24\xc7\x49\x9a\x1b\xb0\x05\x48\x2c\x52\x14\xf9\x91\x1f\x69\xa5\x78\x75\x73\x77\xfd\xf0\xe7\xef\x3f\x43\x1b\x3a\xbd\xbe\x28\xe2\x03\x34\x9a\xa6\x14\x64\x44\x54\x10\xd6\xeb\x0b\x80\xa2\xa3\x80\xd0\x86\xd0\x4b\xfa\x34\xf0\xb6\x14\xd7\xd6\x04\x32\x41\x3e\xec\x7a\x12\xa0\x26\xa9\x14\x81\x9e\x43\x1e\xdd\xbc\x03\xd5\xa2\xf3\x14\xca\x3f\x1e\x7e\x91\xdf\x89\xfc\xe8\xc6\x60\x47\xa5\xd8\x32\x8d\xbd\x75\xe1\xe4\xf0\xc8\x75\x68\xcb\x9a\xb6\xac\x48\x26\x61\x01\x6c\x38\x30\x6a\xe9\x15\x6a\x2a\x97\x0b\xe8\xf0\x99\xbb\xa1\x9b\x15\xd9\xe5\xde\x75\xe0\xa0\x69\xdd\xa0\x69\x46\xdc\x15\xf9\x24\x5e\xc4\x9d\x57\x52\xc2\xf5\xfd\x3d\x80\x94\xc9\x52\xb3\x79\x82\xd6\xd1\xa6\x14\x31\x23\xbf\xca\xf3\x8d\x35\xc1\x67\x8d\xb5\x8d\x26\xec\xd9\x67\xca\x76\x39\x2b\x6b\x7e\xd8\x60\xc7\x7a\x57\x7e\xc0\x40\x8e\x51\x7f\x73\xab\xac\xf1\x02\x1c\xe9\x52\xf8\xb0\xd3\xe4\x5b\xa2\x20\x8e\x8e\xcf\x77\xce\x22\xa9\xda\x3c\xfa\x4c\x69\x3b\xd4\x1b\x8d\x8e\x52\x24\x7c\xc4\xe7\x5c\x73\xe5\xf3\x6e\x1f\x87\x3f\x53\x7e\x99\x2d\x2f\x2f\xb3\x37\xb9\xf2\x2f\xf4\x59\xc7\x26\x53\xde\x4f\x31\x53\xa4\xb8\x02\xe8\x1d\x65\x15\xfa\x16\xfe\x4a\x62\xfc\x54\xa8\x9e\x1a\x67\x07\x53\x4b\x65\xb5\x75\x2b\xa8\x34\xaa\xa7\x77\x07\x83\xbd\xf6\xf5\xb7\xdf\x6f\xaa\xb7\x57\x47\x7d\x2c\x88\xf4\xfc\x99\x56\xe0\x3b\xd4\xfa\x6c\x67\xaa\xca\x0a\xae\xad\xf1\x56\xa3\x5f\x7c\xb0\x06\x95\x5d\xbc\x1f\x14\xd7\xb8\x57\xd3\xe2\x3d\x57\xe4\x30\xb0\x35\xf0\xc1\x1a\xbb\xb8\xa1\x47\xfc\x38\xc0\x3d\x1a\x3f\x29\x7e\xe2\xe0\x83\x23\xec\xe0\x23\x39\x3c\xd9\xb8\xb6\x83\x63\x72\xf0\x1b\x8d\x0b\xe8\xac\xb1\xbe\x47\x45\x47\x14\x76\x4b\x6e\xa3\xed\xb8\x02\x1c\x82\x3d\xea\x47\xeb\x6a\x39\x3a\xec\x57\x60\xac\xeb\xf0\x04\xf8\xd8\x72\x20\x99\xfc\xac\x62\xad\xa6\x9d\xbf\x2f\xd2\x23\x8b\x64\xcb\x4a\x5b\xf5\xb4\x2f\x5f\x8f\x75\xcd\xa6\x59\xc1\x25\x2c\xaf\xfa\xe7\xd9\xfa\xdc\x38\x9b\x99\x91\x51\xe9\x4f\x6a\x7f\x52\x42\x36\x2d\x39\x0e\xb3\x8f\x22\xdf\xb3\x56\xe4\xd3\x80\x15\x95\xad\x77\x89\x4e\x83\x5b\x50\x1a\xbd\x2f\x85\xe6\xa6\x0d\xb2\xd2\x03\x41\xfc\x11\xe0\xac\xa6\x52\x18\xdc\x72\x93\x6a\x2a\x26\xda\x8b\x9a\x0f\x67\x0c\x6e\x53\xf6\x3d\xb9\x34\x56\xc8\x86\x9c\x58\x17\x08\x5c\x97\x42\xdb\xc6\xca\xa3\x7a\xdf\x99\xaf\xc5\x7c\xba\x72\x68\x6a\x19\xad\xc4\x71\x90\x70\xbd\xcf\xa8\x18\xf4\x6c\xe8\x22\x34\x68\xb9\x26\x69\x8d\xec\xa8\x96\xf1\x60\x6d\xc7\x88\x69\x36\xcf\x07\x7d\x14\x06\x9d\x10\x44\x7c\x9d\xad\x58\xd3\x21\xa8\x8f\x5e\x0c\x6e\xcf\x4f\xee\xd7\x78\x44\x59\x63\x40\x89\x2a\xf0\x16\x03\xf9\x7f\x75\x56\x0d\x21\x58\x13\x7b\x5d\x63\xef\x49\xac\x0b\x9e\xb7\x5e\xf2\x24\xd6\x1d\x99\xa1\xc8\x79\x7d\xc8\xb0\xc8\x6b\xde\x26\x12\x72\x83\xd3\xe2\xa4\xb2\x9e\x54\xea\x63\x63\x65\x8f\xb5\xac\x6c\x10\x29\x23\x36\x35\x3d\xcb\x0a\x4d\x2a\xf4\x17\x84\x9c\x90\x30\x67\x54\xb9\x75\xfc\xce\x62\xbb\x9c\x6d\x63\x2f\x44\xde\xc8\x04\x72\x50\xa3\x7b\x22\x23\xdf\x1e\xa8\x80\x5f\x87\x8a\x9c\xa1\x40\x1e\x7e\x1c\x42\x4b\x26\xb0\x4a\x8d\x50\xe4\xed\xf2\xe0\xef\x24\xb8\xb3\xe3\xde\xdb\x21\x7a\x0c\x78\x75\x1e\xd0\x6a\xf0\xcb\x37\x90\x1a\x4e\xac\x1f\x5a\xf6\x30\x04\xd6\x1c\x76\x30\xb2\xd6\xd0\x92\xee\x61\x67\x87\x38\x6b\x73\x58\x82\x91\x43\x1b\xb5\xee\x14\x98\xd2\x83\x8f\xe8\xd3\x26\x1a\xb8\xeb\xc9\xdc\xde\xc4\x17\x82\x21\x15\xe0\xab\xbb\xdb\x9b\xeb\xaf\x21\x4e\x6e\x06\xf7\xdc\x18\x60\x03\xc1\x42\x43\x01\x7c\x40\x17\xa8\xce\x8a\xbc\xbd\x3a\x64\x33\x73\xf2\xff\x52\x9b\x9b\x25\xd7\xb6\x61\x23\x26\x86\x62\x5b\x6a\x1b\x39\x4b\xcd\x71\xec\x95\x60\xa4\x46\xd7\x10\x8c\xb8\x25\x2f\x69\xb3\x89\x10\x27\x21\xd5\x62\x9a\xbb\x75\xc2\x79\x6b\x4e\x47\xe1\x05\xac\x99\xd0\xf3\x2e\x4a\x8b\xa8\x3d\xdc\x42\x70\xaf\x1c\xf7\xc1\xef\x2f\x22\x9f\x24\xf0\x4e\x9d\xdc\x0f\xb6\xa6\xec\xf1\xd3\x40\x6e\x97\xae\x86\x69\x29\xdf\x64\xcb\x6c\x99\xde\xfc\x8f\x5e\xac\x8b\x7c\x3a\xfa\x85\x97\xc7\x97\x37\xc5\x7f\xd9\xc6\xcb\xf5\xcc\x28\x21\x9f\x5e\x47\x45\x3e\xfd\x2d\xb8\xf8\x27\x00\x00\xff\xff\x21\x03\x34\xb3\x28\x08\x00\x00")

func templatesHomeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHomeTmpl,
		"templates/home.tmpl",
	)
}

func templatesHomeTmpl() (*asset, error) {
	bytes, err := templatesHomeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/home.tmpl", size: 2088, mode: os.FileMode(420), modTime: time.Unix(1525948100, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/commandline.tmpl": templatesCommandlineTmpl,
	"templates/home.tmpl": templatesHomeTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"commandline.tmpl": &bintree{templatesCommandlineTmpl, map[string]*bintree{}},
		"home.tmpl": &bintree{templatesHomeTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

